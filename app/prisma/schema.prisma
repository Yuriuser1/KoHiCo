generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/kohico_shop/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  phone         String?
  isAdmin       Boolean   @default(false)
  password      String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  country     String?
  logoUrl     String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brands")
}

model Product {
  id               String         @id @default(cuid())
  sku              String         @unique
  name             String
  slug             String         @unique
  shortDescription String?
  description      String?
  price            Int
  currency         String         @default("RUB")
  volume           String?
  inStock          Boolean        @default(true)
  isFeatured       Boolean        @default(false)
  isPromo          Boolean        @default(false)
  promoText        String?
  benefits         String[]       @default([])
  ingredients      String[]       @default([])
  usage            String?
  tags             String[]       @default([])
  categoryId       String
  brandId          String
  telegramPostId   String?
  images           ProductImage[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  category         Category       @relation(fields: [categoryId], references: [id])
  brand            Brand          @relation(fields: [brandId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  userId        String
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  totalAmount   Int
  currency      String        @default("RUB")
  
  // Customer information
  customerEmail String
  customerPhone String
  customerName  String
  
  // Delivery information
  deliveryAddress String?
  deliveryCity    String?
  deliveryPostal  String?
  deliveryNotes   String?
  
  // Payment information
  paymentId       String?
  paymentMethod   String?
  
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@map("order_items")
}
